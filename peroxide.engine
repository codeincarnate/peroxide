<?php

/**
 * Initialize peroxide
 */
function peroxide_init($theme) {
  $file = dirname($theme->filename) . '/template.php';
  if (file_exists($file)) {
    include_once "./$file";
  }

  // Set Haml parser options
  if (!empty($theme->info['peroxide']['options']['haml'])) {
    _peroxide_set_haml_options($theme, $theme->info['peroxide']['options']['haml']);
  }

  // Set Sass parser options
  if (!empty($theme->info['peroxide']['options']['sass'])) {
    _peroxide_set_sass_options($theme->info['peroxide']['options']['sass']);
  }

  // TODO: Allow options for the parsers to be set in the theme's info file
  _peroxide_init();
  _peroxide_scan_sass($theme);
}

/**
 * The extension for our templates
 */
function peroxide_extension() {
  return ".haml";
}

/**
 * We're handling HAML template files
 */
function peroxide_theme($existing, $type, $theme, $path) {
  $templates = drupal_find_theme_functions($existing, array('haml', $theme));
  $templates += drupal_find_theme_templates($existing, '.haml', $path);
  return $templates;
}

/**
 * Render a HAML template
 */
function peroxide_render_template($template, $vars) {
  // Attempt to make a logical cache structure, if that doesn't work then throw it out the window
  // Assuming directory is always set this should handle multiple themes well
  if (isset($vars['directory'])) {
    $cached_haml_path = file_directory_path() . '/peroxide/haml_c/' . basename($vars['directory']);
  }
  else {
    $cached_haml_path = file_directory_path() . '/peroxide/haml_c/';
  }

  // Make sure that the directory we're placing css files in exists, if it doesn't exist attempt to create it
  _peroxide_check_directory($cached_haml_path);

  // Retrieve options for the Haml parser
  $options = _peroxide_get_haml_options();

  // Extract Variables
  extract($vars, EXTR_SKIP);

  // Render the template
  ob_start();
  $parser = new HamlParser($options);
  include $parser->parse($template, $cached_haml_path, 0755, '.haml', '.tpl.php');
  $contents = ob_get_contents();
  ob_end_clean();

  // Return contents
  return $contents;
}

/**
 * Initialize the Haml and Sass Parsers
 */
function _peroxide_init() {
  $path = drupal_get_path('theme_engine', 'peroxide');
  include_once $path . 'phamlp/haml/HamlParser.php';
  include_once $path . 'phamlp/sass/SassParser.php';
}

/**
 * Scan for sass files, produce css files and then add them to the page
 */
function _peroxide_scan_sass($theme) {
  // Setup initial file paths
  $path = drupal_get_path('theme', $theme->name);
  $cached_css_path = file_directory_path() . '/peroxide/css/' . $theme->name;
  
  // Make sure that the directory we're placing css files in exists, if it doesn't exist attempt to create it
  _peroxide_check_directory($cached_css_path);

  // Setup the Sass Parser
  $options = _peroxide_get_sass_options($theme);
  $parser = new SassParser($options);

  // Read information about sass files from the theme's info file
  if (!empty($theme->info['sass'])) {
    foreach ($theme->info['sass'] as $media => $sassy) {
      foreach ($sassy as $sass) {
        $sass_path = $path . '/' . $sass;
        $info = pathinfo($sass_path);
        $css_file = $cached_css_path . '/' . $info['filename'] . ".css";

        try {
          $css = $parser->parse($sass_path)->render();
        }
        catch (SassException $e) {
          drupal_set_message($e->getMessage(), 'error');
          drupal_set_message($e->getTraceAsString(), 'error');
        }
        file_put_contents($css_file, $css);
        drupal_add_css($css_file, 'theme', $media);
      }
    }
  }
}

/**
 * Check to see if a directory exists, if it doesn't
 * attempt to recursively create the necessary directories.
 */
function _peroxide_check_directory($path) {
  $dir_exists = file_check_directory($path);
  if (!$dir_exists) {
    $result = mkdir($path, 0755, TRUE);
    if (!$result) {
      drupal_set_message('You must have your Drupal files directory correctly configured to use peroxide.', 'error');
      return;
    }
  }
  else {
    $result = TRUE;
  }

  return $result;
}


/**
 * Set options for the Haml parser.
 */
function _peroxide_set_haml_options($options = array()) {
  static $set_options;

  // If no options were passed in then return the options that have been set
  if (empty($options)) {
    if (empty($set_options)) {
      return _peroxide_default_haml_options();
    }

    return $set_options;
  }

  $set_options = array_merge(_peroxide_default_haml_options(), $options);
  return $set_options;
}

/**
 * Get options for the Haml parser
 */
function _peroxide_get_haml_options() {
  return _peroxide_set_haml_options();
}

/**
 * Default options for the Haml parser.
 */
function _peroxide_default_haml_options() {
  $options = array(
    'style' => 'nested',
  );

  return $options;
}


/**
 * Set options for the sass parser
 */
function _peroxide_set_sass_options($theme, $options = array()) {
  static $set_options;

  // If no options were passed in then return the options that have been set
  if (empty($options)) {
    if (empty($set_options)) {
      return _peroxide_default_sass_options($theme);
    }

    return $set_options;
  }

  $set_options = array_merge(_peroxide_default_sass_options($theme), $options);
  return $set_options;
}

/**
 * Retrieve options for the Sass parser.
 */
function _peroxide_get_sass_options($theme) {
  return _peroxide_set_sass_options($theme);
}

/**
 * Default options for the Sass parser.
 */
function _peroxide_default_sass_options($theme) {
  $options = array(
    'cache_location' => file_directory_temp(),
    'css_location' => $path . '/css',
    'extensions' => array(
      'compass' => array(),
    ),
  );
  
  // hook_peroxide_default_sass_options_alter(&$options, $theme)
  drupal_alter('peroxide_default_sass_options', $options, $theme);
  $function = $theme->name . '_peroxide_default_sass_options_alter';
  if (function_exists($function)) {
    $function($options, $theme);
  }

  return $options;
}